'use strict';

// tests for pagamento
// Generated by serverless-jest-plugin

const { response: response_mock } = require('./mocks/response');
const { pagamentoMock } = require('./mocks/PagamentoMock');
const reqDebito = require('./mocks/req_debito.json');
const reqCredito = require('./mocks/req_credito.json');
const { pagamentoControllerFactory } = require('../src/controllers/PagamentoController');

jest.mock('axios');

describe('Testes de pagamento', () => {
  const { pagar_debito, pagar_credito, extrato_pagamento } = pagamentoControllerFactory({ Pagamento: pagamentoMock });

  describe('Testes referente ao método de pagamento de débito', () => {
    it('Testando a criação de um pagamento (1)', async () => {
      const response_controller = await pagar_debito({ body: reqDebito }, response_mock);
      expect(response_controller.code).toBe(200);
      expect(response_controller.json_obj).toHaveProperty('valor');
      expect(response_controller.json_obj).toHaveProperty('tipo_pagamento');
      expect(response_controller.json_obj).toHaveProperty('dia');
      expect(response_controller.json_obj).toHaveProperty('mes');
      expect(response_controller.json_obj).toHaveProperty('ano');
      expect(response_controller.json_obj).toHaveProperty('createdAt');
      expect(response_controller.json_obj).toHaveProperty('updatedAt');
    });

    it('Validacao de erro na resposta do axios', async () => {
      const response = await pagar_debito({ body: {} }, response_mock);
      expect(response.code).toBe(400);
    });
  });

  describe('Testes referente ao método de pagamento de crédito', () => {
    it('Testando a criação de um pagamento (1)', async () => {
      const response_controller = await pagar_credito({ body: reqCredito }, response_mock);
      expect(response_controller.code).toBe(200);
      expect(response_controller.json_obj).toHaveProperty('valor');
      expect(response_controller.json_obj).toHaveProperty('tipo_pagamento');
      expect(response_controller.json_obj).toHaveProperty('dia');
      expect(response_controller.json_obj).toHaveProperty('mes');
      expect(response_controller.json_obj).toHaveProperty('ano');
      expect(response_controller.json_obj).toHaveProperty('createdAt');
      expect(response_controller.json_obj).toHaveProperty('updatedAt');
    });

    it('Validacao de erro na resposta do axios', async () => {
      const response = await pagar_credito({ body: {} }, response_mock);
      expect(response.code).toBe(400);
    });
  });

  describe('Serviço de consulta consolidada', () => {
    it('Teste de listagem da consulta', async () => {
      const response_controller = await extrato_pagamento({ query: { ano: '2021', mes: '04' } }, response_mock);
      expect(response_controller.code).toBe(200);
      expect(response_controller.json_obj).toHaveProperty('saldo_credito');
      expect(response_controller.json_obj).toHaveProperty('saldo_debito');
    });

    it('Teste de falha no parametro', async () => {
      const response = await extrato_pagamento({ query: {} }, response_mock);
      expect(response.code).toBe(500);
    });
  });
});
